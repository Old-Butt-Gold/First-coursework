unit DateUnit;

interface

uses
  Vcl.Graphics, Math;

Type
    TChessPiece = (cpNone, cpPawn, cpRook, cpKnight, cpBishop, cpQueen, cpKing);
    TChessColor = (ccNone, ccWhite, ccBlack);
    TArrOI = Array of Integer;
    TArrCP = Array of TChessPiece;
    TFixedPiecesPos = Record
      IndexI, IndexJ: Integer;
      IsKilled: Boolean;
      ChessType: TChessPiece;
    End;
    TArrFixedPiecesPos = Array [1..16] of TFixedPiecesPos;

    TChessPos = record
      X, Y: Integer;
    end;
    TArrChessPos = Array of TChessPos;

    TChessRecord = Record
      Piece: TChessPiece;
      Color: TChessColor;
      BitMap: TBitMap;
      Tag: Integer;
    end;

    TChess = Class
  private
      Const FBoundsOfSquare: Integer = 80;
      Function GetBoundsOfSquare: Integer;
      Procedure SetCoordinatesToCells;
      Procedure InitializeBoard(Path: String);
      Procedure SetDefinitions(I, J: Integer; Item: TChessPiece; ColorItem: TChessColor; Path: String; Tag: Integer);
      Function GetTypeOfPieceByName(Name: String): TChessPiece;
  protected
      FBoard: array [0..7, 0..7] of TChessRecord;
      FBoardPos: array [0..7, 0..7] of TChessPos;
      FWhitePieces, FBlackPieces: TArrFixedPiecesPos;
      Procedure MakeEmptyBitMaps;
      Procedure SwapPieces;
      Procedure ChangePositionsOnBoard(XStart, YStart, XEnd, YEnd: Integer);
      Function IsLegalMove(XStart, YStart, XEnd, YEnd: Integer; ChessType: TChessPiece): Boolean;
      Function CheckPawnMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
      Function CheckRookMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
      Function CheckKnightMove(DeltaX, DeltaY: Integer): Boolean;
      Function CheckKingMove(DeltaX, DeltaY: Integer): Boolean;
      Function CheckBishopMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
      Function CheckQueenMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
      Function IsKingInDanger(FirstPieces, SecondPieces: TArrFixedPiecesPos): Boolean;
      Function CheckMate(Color: TChessColor; ArrOfPieces, ArrOfEnemyPieces: TArrFixedPiecesPos): Boolean;
      Function IsOtherPieceMove(ArrOfPieces: TArrFixedPiecesPos; X, Y: Integer): Boolean;
      Function GetPossibleMoves(X, Y: Integer): TArrChessPos;
      Function CheckForShahItself(FCurrentMoveColor: TChessColor; XStart, YStart, XEnd, YEnd: Integer): Boolean;
      Function IsTie(Color: TChessColor): Boolean;
      Function IsStaleMate(Color: TChessColor): Boolean;
      Function IsPawnAtEnd(XEnd, YEnd: Integer; Path: String): Boolean;
  public
      Destructor Destroy; override;
      Property StartBound: TChessPos read FBoardPos[0,0];
      Constructor Create(Path: String);
      Property BoundsOfSquare: Integer read GetBoundsOfSquare;
      Function EndBound: TChessPos;
      Function GetPieceColor(const APosition: TChessPos): TChessColor;
      Function GetPieceType(const APosition: TChessPos): TChessPiece;
  End;

implementation

uses UnitMain, UnitChoosePiece;

Destructor TChess.Destroy;
Var
    I, J: Integer;
Begin
    For I := 0 to 7 do
        For J := 0 to 7 do
            FBoard[I,J].BitMap.Free;
End;

Function TChess.GetPossibleMoves(X, Y: Integer): TArrChessPos;
Var
    I, J: Integer;
    ArrPossibleMoves: TArrChessPos;
Begin
    For I := 0 to 7 do
        For J := 0 to 7 do
        Begin
            If Not(FBoard[X, Y].Color = FBoard[I, J].Color) and IsLegalMove(X, Y, I, J, FBoard[X, Y].Piece) Then
            Begin
                SetLength(ArrPossibleMoves, Length(ArrPossibleMoves) + 1);
                ArrPossibleMoves[High(ArrPossibleMoves)].X := I;
                ArrPossibleMoves[High(ArrPossibleMoves)].Y := J;
            End;
        End;
    GetPossibleMoves := ArrPossibleMoves;
End;

Function TChess.IsTie(Color: TChessColor): Boolean;
Var
    I: Integer;
    Arr: TArrCP;
    IsCorrect: Boolean;
Begin
    IsCorrect := False;
    If Color = CcBlack Then   //Black или White
    Begin
        For I := 1 to 16 do
            If Not(FBlackPieces[I].IsKilled) Then
            Begin
                SetLength(Arr, Length(Arr) + 1);
                Arr[High(Arr)] := FBlackPieces[I].ChessType;
            End;
        For I := 1 to 16 do
            If Not(FWhitePieces[I].IsKilled) Then
            Begin
                SetLength(Arr, Length(Arr) + 1);
                Arr[High(Arr)] := FWhitePieces[I].ChessType;
            End;
    End
    Else
    Begin
        For I := 1 to 16 do
            If Not(FWhitePieces[I].IsKilled) Then
            Begin
                SetLength(Arr, Length(Arr) + 1);
                Arr[High(Arr)] := FWhitePieces[I].ChessType;
            End;
        For I := 1 to 16 do
            If Not(FBlackPieces[I].IsKilled) Then
            Begin
                SetLength(Arr, Length(Arr) + 1);
                Arr[High(Arr)] := FBlackPieces[I].ChessType;
            End;
    End;
    If Length(Arr) = 2 Then
        IsCorrect := True
    Else If Length(Arr) = 3 Then
    Begin
        If Arr[0] = CpBishop Then
            IsCorrect := True;
        If Arr[0] = CpKnight Then
            IsCorrect := True;
    End
    Else If Length(Arr) = 4 Then
    Begin
        If (Arr[0] = CpBishop) and (Arr[2] = CpBishop) Then
            IsCorrect := True;
        If (Arr[0] = CpKnight) and (Arr[1] = CpKnight) Then
            IsCorrect := True;
    End;
    Arr := Nil;
    IsTie := IsCorrect;
End;

Function TChess.IsStaleMate(Color: TChessColor): Boolean;
Var
    I, X, Y: Integer;
    IsDraw: Boolean;
    Arr: TArrChessPos;
Begin
    IsDraw := True;
    If Color = CcWhite Then
    Begin
        X := FWhitePieces[16].IndexI;
        Y := FWhitePieces[16].IndexJ;
        Arr := GetPossibleMoves(X, Y);
        I := Low(Arr);
        While IsDraw and (I < Length(Arr)) do
        Begin
            IsDraw := CheckForShahItSelf(Color, X, Y, Arr[I].X, Arr[I].Y);
            Inc(I);
        End;
        If IsDraw Then
        Begin
            I := 1;
            //тут брать массив GetPossibleMoves и затем проходиться по нему и сверять на шах и мат самому себе
            While IsDraw and (I < High(FWhitePieces)) do
            Begin
                If Not(FWhitePieces[I].IsKilled) Then
                    IsDraw := Length(GetPossibleMoves(FWhitePieces[I].IndexI, FWhitePieces[I].IndexJ)) = 0;
                Inc(I);
            End;
        End;
    End
    Else
    Begin
        X := FBlackPieces[16].IndexI;
        Y := FBlackPieces[16].IndexJ;
        Arr := GetPossibleMoves(X, Y);
        I := 0;
        While IsDraw and (I < Length(Arr)) do
        Begin
            IsDraw := CheckForShahItSelf(Color, X, Y, Arr[I].X, Arr[I].Y);
            Inc(I);
        End;
        If IsDraw Then
        Begin
            I := 1;
            While IsDraw and (I < High(FBlackPieces)) do
            Begin
                If Not(FBlackPieces[I].IsKilled) Then
                    IsDraw := Length(GetPossibleMoves(FBlackPieces[I].IndexI, FBlackPieces[I].IndexJ)) = 0;
                Inc(I);
            End;
        End;
    End;
    IsStaleMate := IsDraw;
End;

Function TChess.CheckForShahItself(FCurrentMoveColor: TChessColor; XStart, YStart, XEnd, YEnd: Integer): Boolean;
Var
    TempColorStart, TempColorEnd: TChessColor;
Begin
    If (FBoard[XStart, YStart].Piece = CpKing) and (FCurrentMoveColor = CcWhite) Then
    Begin
        FWhitePieces[FBoard[XStart, YStart].Tag].IndexI := XEnd;
        FWhitePieces[FBoard[XStart, YStart].Tag].IndexJ := YEnd;
    End
    Else If (FBoard[XStart, YStart].Piece = CpKing) Then
    Begin
        FBlackPieces[FBoard[XStart, YStart].Tag].IndexI := XEnd;
        FBlackPieces[FBoard[XStart, YStart].Tag].IndexJ := YEnd;
    End;
    TempColorStart := FBoard[XStart, YStart].Color;
    TempColorEnd := FBoard[XEnd, YEnd].Color;
    FBoard[XStart, YStart].Color := CcNone;
    FBoard[XEnd, YEnd].Color := TempColorStart;
    If FBoard[XEnd, YEnd].Tag > 0 Then
    Begin
        If FCurrentMoveColor = CcWhite Then
        Begin
            FBlackPieces[FBoard[XEnd, YEnd].Tag].IsKilled := True;
            CheckForShahItself := IsKingInDanger(FWhitePieces, FBlackPieces);
            FBlackPieces[FBoard[XEnd, YEnd].Tag].IsKilled := False;
        End
        Else
        Begin
            FWhitePieces[FBoard[XEnd, YEnd].Tag].IsKilled := True;
            CheckForShahItself := IsKingInDanger(FBlackPieces, FWhitePieces);
            FWhitePieces[FBoard[XEnd, YEnd].Tag].IsKilled := False;
        End;
    End
    Else
    Begin
        If FCurrentMoveColor = CcWhite Then
          CheckForShahItself := IsKingInDanger(FWhitePieces, FBlackPieces)
        Else
          CheckForShahItself := IsKingInDanger(FBlackPieces, FWhitePieces);
    End;
    FBoard[XStart, YStart].Color := TempColorStart;
    FBoard[XEnd, YEnd].Color := TempColorEnd;
    If (FBoard[XStart, YStart].Piece = CpKing) and (FCurrentMoveColor = CcWhite) Then
    Begin
        FWhitePieces[FBoard[XStart, YStart].Tag].IndexI := XStart;
        FWhitePieces[FBoard[XStart, YStart].Tag].IndexJ := YStart;
    End
    Else If (FBoard[XStart, YStart].Piece = CpKing) Then
    Begin
        FBlackPieces[FBoard[XStart, YStart].Tag].IndexI := XStart;
        FBlackPieces[FBoard[XStart, YStart].Tag].IndexJ := YStart;
    End;
End;

Procedure TChess.SwapPieces;
Var
    I, J: Integer;
    Temp: TChessRecord;
Begin
    For I := 0 to 3 do
    Begin
        Temp := FBoard[I,I];
        FBoard[I,I] := FBoard[7 - I, 7 - I];
        FBoard[7 - I, 7 - I] := Temp;
    End;
    For I := 0 to 7 do
        For J := I + 1 to 7 do
        Begin
            Temp := FBoard[I, J];
            FBoard[I, J] := FBoard[7 - I, 7 - J];
            FBoard[7 - I, 7 - J] := Temp;
        End;
    For I := 1 to 16 do
    Begin
        FWhitePieces[I].IndexI := 7 - FWhitePieces[I].IndexI;
        FBlackPieces[I].IndexI := 7 - FBlackPieces[I].IndexI;
        FWhitePieces[I].IndexJ := 7 - FWhitePieces[I].IndexJ;
        FBlackPieces[I].IndexJ := 7 - FBlackPieces[I].IndexJ;
    End;
End;

Function TChess.IsOtherPieceMove(ArrOfPieces: TArrFixedPiecesPos; X, Y: Integer): Boolean;
Var
    TempX, TempY, J: Integer;
    IsNotMove: Boolean;
Begin
    IsNotMove := True;
    J := 1;
    While IsNotMove and (J < 16) do
    Begin
        If Not(ArrOfPieces[J].IsKilled) Then
        Begin
            TempX := ArrOfPieces[J].IndexI;
            TempY := ArrOfPieces[J].IndexJ;
            If (TempX <> X) or (TempY <> Y) Then
                IsNotMove := Not(IsLegalMove(TempX, TempY, X, Y, FBoard[TempX, TempY].Piece));
        End;
        Inc(J);
    End;
    IsOtherPieceMove := Not(IsNotMove);
End;

Procedure TChess.ChangePositionsOnBoard(XStart, YStart, XEnd, YEnd: Integer);
Begin
    FBoard[XEnd, YEnd].Piece := FBoard[XStart, YStart].Piece;
    FBoard[XEnd, YEnd].Color := FBoard[XStart, YStart].Color;
    FBoard[XEnd, YEnd].Tag := FBoard[XStart, YStart].Tag;
    FBoard[XEnd, YEnd].BitMap.Assign(FBoard[XStart, YStart].BitMap);
    FBoard[XStart, YStart].BitMap.Assign(Nil);
    FBoard[XStart, YStart].Piece := cpNone;
    FBoard[XStart, YStart].Color := ccNone;
    FBoard[XStart, YStart].Tag := 0;
End;

Function TChess.CheckMate(Color: TChessColor; ArrOfPieces, ArrOfEnemyPieces: TArrFixedPiecesPos): Boolean;
Var
    X, Y, I, J: Integer;
    ArrAllyMoves: TArrChessPos;
    IsMate: Boolean;
Begin
    IsMate := True;
    I := 1;
    While (I < Length(ArrOfPieces) + 1) and IsMate do
    Begin
        If Not(ArrOfPieces[I].IsKilled) Then
        Begin
            X := ArrOfPieces[I].IndexI;
            Y := ArrOfPieces[I].IndexJ;
            ArrAllyMoves := GetPossibleMoves(X, Y);
            J := Low(ArrAllyMoves);
            While IsMate and (J < Length(ArrAllyMoves)) do
            Begin
                IsMate := CheckForShahItself(Color, X, Y, ArrAllyMoves[J].X, ArrAllyMoves[J].Y);
                Inc(J);
            End;
        End;
        Inc(I);
    End;
    ArrAllyMoves := Nil;
    CheckMate := IsMate;
End;

Function TChess.CheckPawnMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
Begin
    CheckPawnMove := True;
    If FMainForm.Reverse.Checked Then
    Begin
        If (DeltaX = 1) and (DeltaY = 0) and (FBoard[XEnd, YEnd].Color = CcNone) and (XStart > XEnd) Then
            CheckPawnMove := True
        Else If (DeltaX = 2) and (DeltaY = 0) and (FBoard[XEnd, YEnd].Color = CcNone) and (FBoard[XStart - 1, YStart].Color = CcNone) and (XStart = 6) Then
            CheckPawnMove := True
        Else If (DeltaX = 1) and (DeltaY = 1) and (XStart > XEnd) and (FBoard[XEnd, YEnd].Color <> CcNone) Then
            CheckPawnMove := True
        Else
            CheckPawnMove := False;
    End
    Else
    Begin
        If FBoard[XStart, YStart].Color = CcWhite Then
        Begin
            If (DeltaX = 1) and (DeltaY = 0) and (FBoard[XEnd, YEnd].Color = CcNone) and (XStart > XEnd) Then
            CheckPawnMove := True
            Else If (DeltaX = 2) and (DeltaY = 0) and (FBoard[XEnd, YEnd].Color = CcNone) and (FBoard[XStart - 1, YStart].Color = CcNone) and (XStart = 6) Then
                CheckPawnMove := True
            Else If (DeltaX = 1) and (DeltaY = 1) and (XStart > XEnd) and (FBoard[XEnd, YEnd].Color <> CcNone) Then
                CheckPawnMove := True
            Else
                CheckPawnMove := False;
        End
        Else
        Begin
            If (DeltaX = 1) and (DeltaY = 0) and (FBoard[XEnd, YEnd].Color = CcNone) and (XStart < XEnd) Then
            CheckPawnMove := True
            Else If (DeltaX = 2) and (DeltaY = 0) and (FBoard[XEnd, YEnd].Color = CcNone) and (FBoard[XStart + 1, YStart].Color = CcNone) and (XStart = 1) Then
                CheckPawnMove := True
            Else If (DeltaX = 1) and (DeltaY = 1) and (XStart < XEnd) and (FBoard[XEnd, YEnd].Color <> CcNone) Then
                CheckPawnMove := True
            Else
                CheckPawnMove := False;
        End;
    End;
End;

Function TChess.CheckRookMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
Var
    IsCorrect: Boolean;
    StepX, StepY: Integer;
Begin
    IsCorrect := True;
    If (DeltaX = 0) or (DeltaY = 0) Then
    Begin
        StepX := Sign(XStart - XEnd);
        StepY := Sign(YEnd - YStart);
        Dec(XStart, StepX);
        Inc(YStart, StepY);
        While IsCorrect and ((XStart <> XEnd) or (YStart <> YEnd)) do
        Begin
            IsCorrect := FBoard[XStart,YStart].Color = CcNone;
            Dec(XStart, StepX);
            Inc(YStart, StepY);
        End;
    End
    Else
        IsCorrect := False;
    CheckRookMove := IsCorrect;
End;

Function TChess.CheckKnightMove(DeltaX, DeltaY: Integer): Boolean;
Begin
    CheckKnightMove := DeltaX * DeltaY = 2;
End;

Function TChess.CheckKingMove(DeltaX, DeltaY: Integer): Boolean;
Begin
    CheckKingMove := (DeltaX < 2) and (DeltaY < 2);
End;

Function TChess.CheckBishopMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
Var
    IsCorrect: Boolean;
    StepX, StepY: Integer;
Begin
    IsCorrect := True;
    If (DeltaX = DeltaY) Then
    Begin
        StepX := Sign(XStart - XEnd);
        StepY := Sign(YEnd - YStart);
        Dec(XStart, StepX);
        Inc(YStart, StepY);
        While IsCorrect and (YStart <> YEnd) do
        Begin
            IsCorrect := FBoard[XStart,YStart].Color = CcNone;
            Dec(XStart, StepX);
            Inc(YStart, StepY);
        End;
    End
    Else
        IsCorrect := False;
    CheckBishopMove := IsCorrect;
End;

Function TChess.CheckQueenMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd: Integer): Boolean;
Var
    StepX, StepY: Integer;
    IsCorrect: Boolean;
Begin
    IsCorrect := True;
    If (DeltaX = 0) or (DeltaY = 0) or (DeltaX = DeltaY) Then
    Begin
        StepX := Sign(XStart - XEnd);
        StepY := Sign(YEnd - YStart);
        Dec(XStart, StepX);
        Inc(YStart, StepY);
        While IsCorrect and ((YStart <> YEnd) or (XEnd <> XStart)) do
        Begin
            IsCorrect := FBoard[XStart,YStart].Color = CcNone;
            Dec(XStart, StepX);
            Inc(YStart, StepY);
        End;
    End
    Else
        IsCorrect := False;
    CheckQueenMove := IsCorrect;
End;

Function TChess.IsLegalMove(XStart, YStart, XEnd, YEnd: Integer; ChessType: TChessPiece): Boolean;
Var
    DeltaX, DeltaY: Integer;
Begin
    DeltaX := Abs(XEnd - XStart);
    DeltaY := Abs(YEnd - YStart);
    Case ChessType Of
        CpPawn:
            IsLegalMove := CheckPawnMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd);
        CpRook:
            IsLegalMove := CheckRookMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd);
        CpKnight:
            IsLegalMove := CheckKnightMove(DeltaX, DeltaY);
        CpBishop:
            IsLegalMove := CheckBishopMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd);
        CpQueen:
            IsLegalMove := CheckQueenMove(DeltaX, DeltaY, XStart, YStart, XEnd, YEnd);
        CpKing:
            IsLegalMove := CheckKingMove(DeltaX, DeltaY);
    End;
End;

Function TChess.IsKingInDanger(FirstPieces, SecondPieces: TArrFixedPiecesPos): Boolean;
Var
    IsRight: Boolean;
    I, XStart, YStart: Integer;
Begin
    IsRight := True;
    I := 1;
    While IsRight and (I < High(SecondPieces) + 1) do
    Begin
        If Not(SecondPieces[I].IsKilled) Then
        Begin
            XStart := SecondPieces[I].IndexI;
            YStart := SecondPieces[I].IndexJ;
            IsRight := Not(IsLegalMove(XStart, YStart, FirstPieces[16].IndexI, FirstPieces[16].IndexJ, FBoard[XStart, YStart].Piece));
        End;
        Inc(I);
    End;
    IsKingInDanger := Not(IsRight);
End;

Function TChess.GetPieceColor(const APosition: TChessPos): TChessColor;
begin
    GetPieceColor := FBoard[APosition.X Div FBoundsOfSquare, APosition.Y Div FBoundsOfSquare].Color;
end;

Function TChess.GetPieceType(const APosition: TChessPos): TChessPiece;
begin
    GetPieceType := FBoard[APosition.X Div FBoundsOfSquare, APosition.Y Div FBoundsOfSquare].Piece;
end;

Function TChess.EndBound: TChessPos;
Var
    AChessPos: TChessPos;
Begin
    AChessPos.X := FBoundsOfSquare + FBoardPos[7, 7].X;
    AChessPos.Y := FBoundsOfSquare + FBoardPos[7, 7].Y;
    Result := AChessPos;
End;

Function TChess.GetBoundsOfSquare: Integer;
Begin
    GetBoundsOfSquare := FBoundsOfSquare;
End;

Function TChess.GetTypeOfPieceByName(Name: string): TChessPiece;
Begin
    If Name = '_rook.bmp' Then
        GetTypeOfPieceByName := CpRook
    Else If Name = '_knight.bmp' Then
        GetTypeOfPieceByName := CpKnight
    Else If Name = '_bishop.bmp' Then
        GetTypeOfPieceByName := CpBishop
    Else
        GetTypeOfPieceByName := CpQueen;
End;

Function TChess.IsPawnAtEnd(XEnd, YEnd: Integer; Path: String): Boolean;
Begin
    IsPawnAtEnd := False;
    If FBoard[XEnd, YEnd].Piece = CpPawn Then
    Begin
        If FMainForm.Reverse.Checked Then
        Begin
            If XEnd = 0 Then
            Begin
                FChooseForm.ShowModal;
                FBoard[XEnd, YEnd].Piece := GetTypeOfPieceByName(FChooseForm.Caption);
                FBoard[XEnd, YEnd].BitMap.Assign(Nil);
                If FBoard[XEnd, YEnd].Color = CcWhite Then
                Begin
                    FWhitePieces[FBoard[XEnd, YEnd].Tag].ChessType := FBoard[XEnd, YEnd].Piece;
                    FBoard[XEnd, YEnd].BitMap.LoadFromFile(Path + 'w' + FChooseForm.Caption);
                End
                Else
                Begin
                    FBlackPieces[FBoard[XEnd, YEnd].Tag].ChessType := FBoard[XEnd, YEnd].Piece;
                    FBoard[XEnd, YEnd].BitMap.LoadFromFile(Path + 'b' + FChooseForm.Caption);
                End;
                IsPawnAtEnd := True;
            End;
        End
        Else If XEnd = 0 Then
        Begin
            FChooseForm.ShowModal;
            FBoard[XEnd, YEnd].Piece := GetTypeOfPieceByName(FChooseForm.Caption);
            FBoard[XEnd, YEnd].BitMap.Assign(Nil);
            FWhitePieces[FBoard[XEnd, YEnd].Tag].ChessType := FBoard[XEnd, YEnd].Piece;
            FBoard[XEnd, YEnd].BitMap.LoadFromFile(Path + 'w' + FChooseForm.Caption);
            IsPawnAtEnd := True;
        End
        Else If XEnd = 7 Then
        Begin
            FChooseForm.ShowModal;
            FBoard[XEnd, YEnd].Piece := GetTypeOfPieceByName(FChooseForm.Caption);
            FBoard[XEnd, YEnd].BitMap.Assign(Nil);
            FBlackPieces[FBoard[XEnd, YEnd].Tag].ChessType := FBoard[XEnd, YEnd].Piece;
            FBoard[XEnd, YEnd].BitMap.LoadFromFile(Path + 'b' + FChooseForm.Caption);
            IsPawnAtEnd := True;
        End;
    End;
End;

Procedure TChess.SetCoordinatesToCells;
Var
    I, J: Integer;
Begin
    For I := 0 to High(FBoard) do
        For J := 0 to High(FBoard) do
        Begin
            FBoardPos[I,J].X := J * FBoundsOfSquare;
            FBoardPos[I,J].Y := I * FBoundsOfSquare;
        End;
End;

Procedure TChess.MakeEmptyBitMaps;
Var
    I, J: Integer;
Begin
    For I := 0 to 7 do
        For J := 0 to 7 do
        Begin
            FBoard[I,J].BitMap := TBitMap.Create;
            FBoard[I,J].BitMap.Transparent := True;
        End;
End;

Constructor TChess.Create(Path: String);
Begin
    MakeEmptyBitMaps;
    InitializeBoard(Path);
    SetCoordinatesToCells;
End;

Procedure TChess.InitializeBoard(Path: String);
Var
    I, J: Integer;
    SizeRow, SizeCol: Integer;
Begin
    SizeRow := High(FBoard);
    SizeCol := High(FBoard[0]);
    Path := Path + '\';
    For I := 0 to 1 do
      For J := 0 to SizeRow div 2 do
      Begin
          If (I = 1) Then
          Begin
              SetDefinitions(I, J, CpPawn, CcBlack, Path + 'b_pawn.bmp', J + 1);
              SetDefinitions(SizeRow - 1, J, CpPawn, CcWhite, Path + 'w_pawn.bmp', J + 1);
              SetDefinitions(I, SizeCol - J, CpPawn, CcBlack, Path + 'b_pawn.bmp', SizeCol - J + 1);
              SetDefinitions(SizeRow - 1, SizeCol - J, CpPawn, CcWhite, Path + 'w_pawn.bmp', SizeCol - J + 1);
          End
          Else
          Begin
              If (J = 0) then
              Begin
                  SetDefinitions(I, J, CpRook, CcBlack, Path + 'b_rook.bmp', 9);
                  SetDefinitions(I, SizeCol - J, CpRook, CcBlack, Path + 'b_rook.bmp', 10);
                  SetDefinitions(SizeRow, J, CpRook, CcWhite, Path + 'w_rook.bmp', 9);
                  SetDefinitions(SizeROw, SizeCol - J, CpRook, CcWhite, Path + 'w_rook.bmp', 10);
              End;
              If (J = 1) Then
              Begin
                  SetDefinitions(I, J, CpKnight, CcBlack, Path + 'b_knight.bmp', 11);
                  SetDefinitions(I, SizeCol - J, CpKnight, CcBlack, Path + 'b_knight.bmp', 12);
                  SetDefinitions(SizeRow, J, CpKnight, CcWhite, Path + 'w_knight.bmp', 11);
                  SetDefinitions(SizeRow, SizeCol - J, CpKnight, CcWhite, Path + 'w_knight.bmp', 12);
              End;
              If (J = 2) Then
              Begin
                  SetDefinitions(I, J, CpBishop, CcBlack, Path + 'b_bishop.bmp', 13);
                  SetDefinitions(I, SizeCol - J, CpBishop, CcBlack, Path + 'b_bishop.bmp', 14);
                  SetDefinitions(SizeRow, J, CpBishop, CcWhite, Path + 'w_bishop.bmp', 13);
                  SetDefinitions(SizeRow, SizeCol - J, CpBishop, CcWhite, Path + 'w_bishop.bmp', 14);
              End;
              If (J = 3) Then
              Begin
                  SetDefinitions(I, J, CpQueen, CcBlack, Path + 'b_queen.bmp', 15);
                  SetDefinitions(SizeRow, J, CpQueen, CcWhite, Path + 'w_queen.bmp', 15);
                  SetDefinitions(I, J + 1, CpKing, CcBlack, Path + 'b_king.bmp', 16);
                  SetDefinitions(SizeRow, J + 1, CpKing, CcWhite, Path + 'w_king.bmp', 16);
              End;
          End;
      End;
End;

Procedure TChess.SetDefinitions(I: Integer; J: Integer; Item: TChessPiece; ColorItem: TChessColor; Path: String; Tag: Integer);
Begin
    FBoard[I,J].Piece := Item;
    FBoard[I,J].Color := ColorItem;
    FBoard[I,J].BitMap := TBitMap.Create;
    FBoard[I,J].BitMap.LoadFromFile(Path);
    FBoard[I,J].BitMap.Transparent := True;
    If ColorItem = CcWhite Then
    Begin
        FBoard[I,J].Tag := Tag;
        FWhitePieces[Tag].IndexI := I;
        FWhitePieces[Tag].IndexJ := J;
        FWhitePieces[Tag].ChessType := Item;
    End
    Else
    Begin
        FBoard[I,J].Tag := Tag;
        FBlackPieces[Tag].IndexI := I;
        FBlackPieces[Tag].IndexJ := J;
        FBlackPieces[Tag].ChessType := Item;
    End;
End;

end.
